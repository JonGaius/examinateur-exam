{"ast":null,"code":"const os = require('os');\nconst path = require('path');\nconst process = require('process');\nconst verifyFile = require('./lib/verify-file.js');\nconst platform = process.env.npm_config_platform || os.platform();\nconst arch = process.env.npm_config_arch || os.arch();\nconst target = platform + '-' + arch;\nconst packageName = '@ffprobe-installer/' + target;\nif (!require('./package.json').optionalDependencies[packageName]) {\n  throw new Error('Unsupported platform/architecture: ' + target);\n}\nconst binary = platform === 'win32' ? 'ffprobe.exe' : 'ffprobe';\nconst npm3Path = path.resolve(__dirname, '..', target);\nconst npm2Path = path.resolve(__dirname, 'node_modules', '@ffprobe-installer', target);\nconst npm3Binary = path.join(npm3Path, binary);\nconst npm2Binary = path.join(npm2Path, binary);\nconst npm3Package = path.join(npm3Path, 'package.json');\nconst npm2Package = path.join(npm2Path, 'package.json');\nlet ffprobePath;\nlet packageJson;\nif (verifyFile(npm3Binary)) {\n  ffprobePath = npm3Binary;\n  packageJson = require(npm3Package);\n} else if (verifyFile(npm2Binary)) {\n  ffprobePath = npm2Binary;\n  packageJson = require(npm2Package);\n} else {\n  throw new Error('Could not find ffprobe executable, tried \"' + npm3Binary + '\" and \"' + npm2Binary + '\"');\n}\nconst version = packageJson.ffprobe || packageJson.version;\nconst url = packageJson.homepage;\nmodule.exports = {\n  path: ffprobePath,\n  version,\n  url\n};","map":{"version":3,"names":["os","require","path","process","verifyFile","platform","env","npm_config_platform","arch","npm_config_arch","target","packageName","optionalDependencies","Error","binary","npm3Path","resolve","__dirname","npm2Path","npm3Binary","join","npm2Binary","npm3Package","npm2Package","ffprobePath","packageJson","version","ffprobe","url","homepage","module","exports"],"sources":["/Users/jonathangaiuskambire/Documents/sigepec/correction/examinateur/node_modules/@ffprobe-installer/ffprobe/index.js"],"sourcesContent":["const os = require('os');\nconst path = require('path');\nconst process = require('process');\n\nconst verifyFile = require('./lib/verify-file.js');\n\nconst platform = process.env.npm_config_platform || os.platform();\nconst arch = process.env.npm_config_arch || os.arch();\n\nconst target = platform + '-' + arch;\n\nconst packageName = '@ffprobe-installer/' + target;\n\nif (!require('./package.json').optionalDependencies[packageName]) {\n\tthrow new Error('Unsupported platform/architecture: ' + target);\n}\n\nconst binary = platform === 'win32' ? 'ffprobe.exe' : 'ffprobe';\n\nconst npm3Path = path.resolve(__dirname, '..', target);\nconst npm2Path = path.resolve(__dirname, 'node_modules', '@ffprobe-installer', target);\n\nconst npm3Binary = path.join(npm3Path, binary);\nconst npm2Binary = path.join(npm2Path, binary);\n\nconst npm3Package = path.join(npm3Path, 'package.json');\nconst npm2Package = path.join(npm2Path, 'package.json');\n\nlet ffprobePath;\nlet packageJson;\n\nif (verifyFile(npm3Binary)) {\n\tffprobePath = npm3Binary;\n\tpackageJson = require(npm3Package);\n} else if (verifyFile(npm2Binary)) {\n\tffprobePath = npm2Binary;\n\tpackageJson = require(npm2Package);\n} else {\n\tthrow new Error('Could not find ffprobe executable, tried \"' + npm3Binary + '\" and \"' + npm2Binary + '\"');\n}\n\nconst version = packageJson.ffprobe || packageJson.version;\nconst url = packageJson.homepage;\n\nmodule.exports = {\n\tpath: ffprobePath,\n\tversion,\n\turl,\n};\n"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,OAAO,GAAGF,OAAO,CAAC,SAAS,CAAC;AAElC,MAAMG,UAAU,GAAGH,OAAO,CAAC,sBAAsB,CAAC;AAElD,MAAMI,QAAQ,GAAGF,OAAO,CAACG,GAAG,CAACC,mBAAmB,IAAIP,EAAE,CAACK,QAAQ,EAAE;AACjE,MAAMG,IAAI,GAAGL,OAAO,CAACG,GAAG,CAACG,eAAe,IAAIT,EAAE,CAACQ,IAAI,EAAE;AAErD,MAAME,MAAM,GAAGL,QAAQ,GAAG,GAAG,GAAGG,IAAI;AAEpC,MAAMG,WAAW,GAAG,qBAAqB,GAAGD,MAAM;AAElD,IAAI,CAACT,OAAO,CAAC,gBAAgB,CAAC,CAACW,oBAAoB,CAACD,WAAW,CAAC,EAAE;EACjE,MAAM,IAAIE,KAAK,CAAC,qCAAqC,GAAGH,MAAM,CAAC;AAChE;AAEA,MAAMI,MAAM,GAAGT,QAAQ,KAAK,OAAO,GAAG,aAAa,GAAG,SAAS;AAE/D,MAAMU,QAAQ,GAAGb,IAAI,CAACc,OAAO,CAACC,SAAS,EAAE,IAAI,EAAEP,MAAM,CAAC;AACtD,MAAMQ,QAAQ,GAAGhB,IAAI,CAACc,OAAO,CAACC,SAAS,EAAE,cAAc,EAAE,oBAAoB,EAAEP,MAAM,CAAC;AAEtF,MAAMS,UAAU,GAAGjB,IAAI,CAACkB,IAAI,CAACL,QAAQ,EAAED,MAAM,CAAC;AAC9C,MAAMO,UAAU,GAAGnB,IAAI,CAACkB,IAAI,CAACF,QAAQ,EAAEJ,MAAM,CAAC;AAE9C,MAAMQ,WAAW,GAAGpB,IAAI,CAACkB,IAAI,CAACL,QAAQ,EAAE,cAAc,CAAC;AACvD,MAAMQ,WAAW,GAAGrB,IAAI,CAACkB,IAAI,CAACF,QAAQ,EAAE,cAAc,CAAC;AAEvD,IAAIM,WAAW;AACf,IAAIC,WAAW;AAEf,IAAIrB,UAAU,CAACe,UAAU,CAAC,EAAE;EAC3BK,WAAW,GAAGL,UAAU;EACxBM,WAAW,GAAGxB,OAAO,CAACqB,WAAW,CAAC;AACnC,CAAC,MAAM,IAAIlB,UAAU,CAACiB,UAAU,CAAC,EAAE;EAClCG,WAAW,GAAGH,UAAU;EACxBI,WAAW,GAAGxB,OAAO,CAACsB,WAAW,CAAC;AACnC,CAAC,MAAM;EACN,MAAM,IAAIV,KAAK,CAAC,4CAA4C,GAAGM,UAAU,GAAG,SAAS,GAAGE,UAAU,GAAG,GAAG,CAAC;AAC1G;AAEA,MAAMK,OAAO,GAAGD,WAAW,CAACE,OAAO,IAAIF,WAAW,CAACC,OAAO;AAC1D,MAAME,GAAG,GAAGH,WAAW,CAACI,QAAQ;AAEhCC,MAAM,CAACC,OAAO,GAAG;EAChB7B,IAAI,EAAEsB,WAAW;EACjBE,OAAO;EACPE;AACD,CAAC"},"metadata":{},"sourceType":"script"}